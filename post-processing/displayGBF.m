% DISPLAY_GBF
% 
% Name:       display_GBF.m
% Purpose:    GUI to visualize results from the process_GBF function
% Author:     Sebastien Biass, Jean-Luc Falcone, Costanza Bonadonna
% Created:    November 2015
% Updated:    November 2017
% Copyright:  S Biass, JL Falcone, C Bonadonna - University of Geneva, 2015
% License:    GNU GPL3
% 
%         "You shake my nerves and you rattle my brain
%         Too much love drives a man insane
%         You broke my will, oh what a thrill
%         Goodness gracious great balls of fire"
%                                     -- J.L. Lewis
% 
% This is a free software: you can redistribute it and/or modify
%     it under the terms of the GNU General Public License as published by
%     the Free Software Foundation, either version 3 of the License, or
%     (at your option) any later version.
% 
%     It is distributed in the hope that it will be useful,
%     but WITHOUT ANY WARRANTY; without even the implied warranty of
%     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%     GNU General Public License for more details.
% 
%     You should have received a copy of the GNU General Public License
%     along with it. If not, see <http://www.gnu.org/licenses/>.

function displayGBF
global G VBP
addpath('dependencies/');
% Retrieve output file
[FileName, PathName] = uigetfile('*.mat');
file    = [PathName, filesep, FileName];

if FileName == 0
    return
end

load(file);

% % Prepare data
EthreshS = cellfun(@num2str, num2cell(VBP.inBal.eT), 'UniformOutput', false);
PthreshS = cellfun(@num2str, num2cell(VBP.inBal.pT), 'UniformOutput', false);

scr = get(0,'ScreenSize');
w   = 500;
h   = 300;
G.fig = figure(...
    'position', [scr(3)/2-w/2 scr(4)/2-h/2 w h],...
    'Color', [.25 .25 .25],...
    'Resize', 'off',...
    'Tag', 'Configuration',...
    'Toolbar', 'none',...
    'Menubar', 'none',...
    'Name', 'GBF results',...
    'NumberTitle', 'off');

    G.main = uipanel(...
        'units', 'normalized',...
        'position', [.03 .03 .94 .94],...
        'title', 'GBF results',...
        'BackgroundColor', [.25 .25 .25],...
        'ForegroundColor', [.9 .5 0],...
        'HighlightColor', [.9 .5 0],...
        'BorderType', 'line');
    
    
    G.pname = uipanel(...
        'units', 'normalized',...
        'position', [.05 .775 .9 .15],...
        'title', 'Project',...
        'BackgroundColor', [.25 .25 .25],...
        'ForegroundColor', [.5 .5 .5],...
        'HighlightColor', [.5 .5 .5],...
        'BorderType', 'line');
    
     G.name1 = uicontrol(...
            'parent', G.pname,...
            'style', 'text',...
            'units', 'normalized',...
            'position', [.025 .1 .95 .65],...
            'HorizontalAlignment', 'left',...
            'BackgroundColor', [.25 .25 .25],...
            'ForegroundColor', [1 1 1],...
            'String', ['Project name: ', FileName]);

    G.p0 = uipanel(...
        'units', 'normalized',...
        'position', [.05 .25 .266 .5],...
        'title', 'Output',...
        'BackgroundColor', [.25 .25 .25],...
        'ForegroundColor', [.5 .5 .5],...
        'HighlightColor', [.5 .5 .5],...
        'BorderType', 'line');
    
        G.t0 = uicontrol(...
            'style', 'listbox',...
            'Parent', G.p0,...
            'units', 'normalized',...
            'position', [.05 .05 .9 .9],...
            'BackgroundColor', [.3 .3 .3],...
            'ForegroundColor', [1 1 1],...
            'String', {'General plots', 'Probability maps', 'Energy maps'},...
            'Max', 10,...
            'Value', [],...
            'UserData', 't0',...
            'Callback', @SET_PANNELS);
        
    G.p1 = uipanel(...
        'units', 'normalized',...
        'position', [.366 .25 .266 .5],...
        'title', 'Plot type',...
        'BackgroundColor', [.25 .25 .25],...
        'ForegroundColor', [.5 .5 .5],...
        'HighlightColor', [.5 .5 .5],...
        'Visible', 'off', ....
        'BorderType', 'line');
       
              
        G.t1 = uicontrol(...
            'style', 'listbox',...
            'Parent', G.p1,...
            'units', 'normalized',...
            'position', [.05 .05 .9 .9],...
            'BackgroundColor', [.3 .3 .3],...
            'ForegroundColor', [1 1 1],...
            'String', {'Matrix', 'Scatter', 'Energy vs. distance', 'Histograms', 'Number of VBPs'},...
            'Max', 10,...
            'Value', [],...
            'UserData', 't1',...
            'Callback', @SET_PANNELS);     
            
        
    G.p11 = uipanel(...
        'units', 'normalized',...
        'position', [.682 .25 .266 .5],...
        'title', 'Variable',...
        'BackgroundColor', [.25 .25 .25],...
        'ForegroundColor', [.5 .5 .5],...
        'HighlightColor', [.5 .5 .5],...
        'Visible', 'off', ....
        'BorderType', 'line');

        G.t11 = uicontrol(...
            'style', 'listbox',...
            'Parent', G.p11,...
            'units', 'normalized',...
            'position', [.05 .05 .9 .9],...
            'BackgroundColor', [.3 .3 .3],...
            'ForegroundColor', [1 1 1],...
            'String', {'Mass (kg)', 'Diameter (m)', 'Kinetic energy (kJ)', 'Landing angle (deg)', 'Ejection andgle (deg)', 'Flight time (s)'},...
            'Max', 10,...
            'Value', [],...
            'UserData', 't11',...
            'Callback', @SET_PANNELS);
            
        
    G.p12 = uipanel(...
        'units', 'normalized',...
        'position', [.682 .25 .266 .5],...
        'title', 'Variable',...
        'BackgroundColor', [.25 .25 .25],...
        'ForegroundColor', [.5 .5 .5],...
        'HighlightColor', [.5 .5 .5],...
        'Visible', 'off', ....
        'BorderType', 'line');

        G.t12 = uicontrol(...
            'style', 'listbox',...
            'Parent', G.p12,...
            'units', 'normalized',...
            'position', [.05 .05 .9 .9],...
            'BackgroundColor', [.3 .3 .3],...
            'ForegroundColor', [1 1 1],...
            'String', {'Distance', 'Radial sector'},...
            'Max', 10,...
            'Value', [],...
            'UserData', 't12',...
            'Callback', @SET_PANNELS);
        
    G.p2 = uipanel(...
        'units', 'normalized',...
        'position', [.366 .25 .266 .5],...
        'title', 'Map type',...
        'BackgroundColor', [.25 .25 .25],...
        'ForegroundColor', [.5 .5 .5],...
        'HighlightColor', [.5 .5 .5],...
        'Visible', 'off', ....
        'BorderType', 'line');
       
              
        G.t2 = uicontrol(...
            'style', 'listbox',...
            'Parent', G.p2,...
            'units', 'normalized',...
            'position', [.05 .05 .9 .9],...
            'BackgroundColor', [.3 .3 .3],...
            'ForegroundColor', [1 1 1],...
            'String', {'Pixel, absolute', 'Pixel, relative', 'Concentric, absolute', 'Concentric, relative', 'Radial, absolute', 'Radial, relative'},...
            'Max', 10,...
            'Value', [],...
            'UserData', 't2',...
            'Callback', @SET_PANNELS);    
               %     'String', {'Pixel', 'Distance P(E_T|Z)', 'Distance P(Z, E_T)', 'Radial P(E_T|Z)', 'Radial P(Z, E_T)'},...
    G.p21 = uipanel(...
        'units', 'normalized',...
        'position', [.682 .25 .266 .5],...
        'title', 'Energy threshold (J)',...
        'BackgroundColor', [.25 .25 .25],...
        'ForegroundColor', [.5 .5 .5],...
        'HighlightColor', [.5 .5 .5],...
        'Visible', 'off', ....
        'BorderType', 'line');

        G.t21 = uicontrol(...
            'style', 'listbox',...
            'Parent', G.p21,...
            'units', 'normalized',...
            'position', [.05 .05 .9 .9],...
            'BackgroundColor', [.3 .3 .3],...
            'ForegroundColor', [1 1 1],...
            'String', EthreshS,...
            'Max', 10,...
            'Value', [],... 
            'UserData', 't21',...
            'Callback', @SET_PANNELS);
            
        
    G.p3 = uipanel(...
        'units', 'normalized',...
        'position', [.366 .25 .266 .5],...
        'title', 'Map type',...
        'BackgroundColor', [.25 .25 .25],...
        'ForegroundColor', [.5 .5 .5],...
        'HighlightColor', [.5 .5 .5],...
        'Visible', 'off', ....
        'BorderType', 'line');
                  
        G.t3 = uicontrol(...
            'style', 'listbox',...
            'Parent', G.p3,...
            'units', 'normalized',...
            'position', [.05 .05 .9 .9],...
            'BackgroundColor', [.3 .3 .3],...
            'ForegroundColor', [1 1 1],...
            'String', {'Pixel', 'Concentric', 'Radial'},...
            'Max', 10,...
            'Value', [],...
            'UserData', 't3',...
            'Callback', @SET_PANNELS); 
        
            G.p31 = uipanel(...
                'units', 'normalized',...
                'position', [.682 .25 .266 .5],...
                'title', 'Probability threshold (J)',...
                'BackgroundColor', [.25 .25 .25],...
                'ForegroundColor', [.5 .5 .5],...
                'HighlightColor', [.5 .5 .5],...
                'Visible', 'off', ....
                'BorderType', 'line');

            G.t31 = uicontrol(...
                'style', 'listbox',...
                'Parent', G.p31,...
                'units', 'normalized',...
                'position', [.05 .05 .9 .9],...
                'BackgroundColor', [.3 .3 .3],...
                'ForegroundColor', [1 1 1],...
                'String', PthreshS,...
                'Max', 10,...
                'Value', [],... 
                'UserData', 't31',...
                'Callback', @SET_PANNELS);

    G.psubset = uipanel(...
        'units', 'normalized',...
        'position', [.05 .065 .44 .14],...
        'BackgroundColor', [.25 .25 .25],...
        'ForegroundColor', [.5 .5 .5],...
        'HighlightColor', [.5 .5 .5],...
        'BorderType', 'line');
    
    G.subs_name = uicontrol(...
        'parent', G.psubset,...
        'style', 'text',...
        'units', 'normalized',...
        'position', [.025 .1 .7 .55],...
        'HorizontalAlignment', 'left',...
        'BackgroundColor', [.25 .25 .25],...
        'ForegroundColor', [1 1 1],...
        'String', 'Subset size (%):', ...
        'Tooltip', 'Reduce the size of the plotted data to decrease the figure size');
    
    G.subs_edit = uicontrol(...
        'parent', G.psubset,...
        'style', 'edit',...
        'unit', 'normalized',...
        'position', [.65 .15 .275 .7],...
        'HorizontalAlignment', 'left',...
        'ForegroundColor', [1 1 1],...
        'BackgroundColor', [.35 .35 .35],...
        'String', '5',...
        'Tooltip', 'Reduce the size of the plotted data to decrease the figure size');
    
    G.log = uipanel(...
        'units', 'normalized',...
        'position', [.52 .065 .425 .14],...
        'BackgroundColor', [.25 .25 .25],...
        'ForegroundColor', [.5 .5 .5],...
        'HighlightColor', [.5 .5 .5],...
        'BorderType', 'line');
    
    G.log_name = uicontrol(...
        'parent', G.log,...
        'style', 'text',...
        'units', 'normalized',...
        'position', [.025 .1 .7 .55],...
        'HorizontalAlignment', 'left',...
        'BackgroundColor', [.25 .25 .25],...
        'ForegroundColor', [1 1 1],...
        'String', 'Plot maps as log10:', ...
        'Tooltip', 'Plot maps using log10');
    
   G.log_check = uicontrol(...
       'parent', G.log,...
       'style', 'checkbox',...
        'units', 'normalized',...
        'position', [.825 .25 .1 .5],...
        'BackgroundColor', [.25 .25 .25],...
        'ForegroundColor', [1 1 1],...
        'Value', 1,...
        'Tooltip', 'Plot maps using log10');
        
       
 function SET_PANNELS(hObject, ~)       
 global G
 
 ud = get(hObject, 'UserData');
 
 if strcmp(ud, 't0');
     set(G.p1, 'Visible', 'off'); set(G.p11, 'Visible', 'off'); set(G.p12, 'Visible', 'off'); 
     set(G.p2, 'Visible', 'off'); set(G.p21, 'Visible', 'off');
     set(G.p3, 'Visible', 'off'); set(G.p31, 'Visible', 'off');
     if get(hObject, 'Value') == 1
         set(G.p1, 'Visible', 'on'); set(G.t1, 'Value', []); 
     elseif get(hObject, 'Value') == 2
         set(G.p2, 'Visible', 'on'); set(G.t2, 'Value', []); 
     elseif get(hObject, 'Value') == 3
         set(G.p3, 'Visible', 'on'); set(G.t3, 'Value', []); 
     end
     
 elseif strcmp(ud, 't1')     
     set(G.p11, 'Visible', 'off'); set(G.p12, 'Visible', 'off'); 
     if get(hObject, 'Value') == 1
         plot_matrix
     elseif get(hObject, 'Value') == 2
         set(G.p11, 'Visible', 'on'); set(G.t11, 'Value', []); 
     elseif get(hObject, 'Value') == 3
         plot_en_vs_dist
     elseif get(hObject, 'Value') == 4
         set(G.p12, 'Visible', 'on'); set(G.t12, 'Value', []); 
     elseif get(hObject, 'Value') == 5
         plot_maps(3) 
     end
     
 elseif strcmp(ud, 't11')
     plot_scatter
     
 elseif strcmp(ud, 't12')
     plot_hist
        
 elseif strcmp(ud, 't2')   
     set(G.p31, 'Visible', 'off'); 
     set(G.p21, 'Visible', 'on'); 
 elseif strcmp(ud, 't21')
     plot_maps(1)
     
 elseif strcmp(ud, 't3')
     set(G.p21, 'Visible', 'off'); 
     set(G.p31, 'Visible', 'on'); 
 elseif strcmp(ud, 't31')
     plot_maps(2)
         
 end

 
function plot_matrix
global G VBP

I = str2double(get(G.subs_edit, 'String'));
if isnan(I)
    errordlg('Please enter the subset as an integer in the range 1-100');
    return
end

randIdx  = randperm(VBP.bal.n,round(VBP.bal.n*I/100)); % Downsampling for heavy figures

figure;
axes_lab = {'Landing altitude (m a.s.l.)', 'Mass (kg)', 'Diameter (m)', 'Kinetic energy (J)'}; %, 'Landing angle (deg)', 'Ejection andgle(deg)', 'Flight time (sec)'};                                        
[~,AX]   = plotmatrix(VBP.bal.data(randIdx,:));

% Work on axes labels and limits
for i = 1:length(axes_lab)
    ylabel(AX(i,1), axes_lab{i});
    xlabel(AX(end,i), axes_lab{i});
    for j = 1:length(axes_lab)
        xlim(AX(i,j), [min(VBP.bal.data(:,j)), max(VBP.bal.data(:,j))]);
        ylim(AX(i,j), [min(VBP.bal.data(:,i)), max(VBP.bal.data(:,i))]);
    end
end

function plot_en_vs_dist
global VBP

d_vec = 0:VBP.inBal.gridRes(1):max(VBP.bal.d)+VBP.inBal.gridRes(1);
d_str = zeros(length(d_vec),5);
p_str = zeros(length(d_vec),1);

for i = 1:length(d_vec)-1
    d_idx       = VBP.bal.d>=d_vec(i) & VBP.bal.d<d_vec(i+1);
    d_str(i,1)  = prctile(VBP.bal.e(d_idx),2); 
    d_str(i,2)  = prctile(VBP.bal.e(d_idx),25);
    d_str(i,3)  = prctile(VBP.bal.e(d_idx),50);
    d_str(i,4)  = prctile(VBP.bal.e(d_idx),75);
    d_str(i,5)  = prctile(VBP.bal.e(d_idx),98);
    p_str(i)    = sum(d_idx);
end

figure; 
subplot(3,1,1:2);
hold on;
plot(d_vec, d_str(:,1), '-g');
plot(d_vec, d_str(:,2), '-b');
plot(d_vec, d_str(:,3), '-k', 'LineWidth', 2);
plot(d_vec, d_str(:,5), '-g');
plot(d_vec, d_str(:,4), '-b');
set(gca, 'YScale', 'log', 'Box', 'on');
legend('2-98th percentiles', 'IQR', 'Median');
xlabel('Distance from the vent (m)');
ylabel('Energy (J)');

subplot(3,1,3)
plot(d_vec, p_str, '-r');
set(gca, 'YScale', 'log', 'Box', 'on');
xlabel('Distance from the vent (m)');
ylabel('Number of particles');

function plot_scatter
global G VBP

I = str2double(get(G.subs_edit, 'String'));
if isnan(I)
    errordlg('Please enter the subset as an integer in the range 1-100');
    return
end

randIdx  = randperm(VBP.bal.n,round(VBP.bal.n*I/100)); % Downsampling for heavy figures

idx = get(G.t11, 'Value');
str = get(G.t11, 'String');
str = str{idx};
  
if get(G.log_check, 'Value') == 1
    str       = ['Log10 ', str];
    data      = log10(VBP.bal.data(randIdx,idx+1));
else
    data      = VBP.bal.data(randIdx,idx+1);
end

figure;
scatter3(VBP.bal.x(randIdx),VBP.bal.y(randIdx),VBP.bal.data(randIdx,1),2,data, 'filled');
axis equal
xlabel('Easting');
ylabel('Northing');
zlabel('Altitude (m asl)');
c = colorbar;
ylabel(c, str);

function plot_hist
global G VBP

if get(G.t12, 'Value') == 1
    figure('Name', 'Distance enveloppes');
    count = 0;
    for i = 1:length(VBP.inBal.eT)
        subplot(length(VBP.inBal.eT),2,i+count)
        bar(VBP.concentric.bin, VBP.concentric.Pabs(:,i), 'FaceColor', [.6 .6 .6])
        if i == 1
            title({'P(Z, E_T)', ['E_T = ', num2str(VBP.inBal.eT(i)), ' J']});
        else
            title(['E_T = ', num2str(VBP.inBal.eT(i)), ' J']);
        end
        xlabel('Distance enveloppe (m)');
        ylabel('Probability (%)');
        xlim([VBP.concentric.bin(1)-VBP.inBal.dI, VBP.concentric.bin(end)+VBP.inBal.dI])
        
        subplot(length(VBP.inBal.eT),2,i+count+1)
        bar(VBP.concentric.bin, VBP.concentric.Prel(:,i), 'FaceColor', [.6 .6 .6])
        if i == 1
            title({'P(E_T | Z)', ['E_T = ', num2str(VBP.inBal.eT(i)), ' J']});
        else
            title(['E_T = ', num2str(VBP.inBal.eT(i)), ' J']);
        end
        xlabel('Distance enveloppe (m)');
        ylabel('Probability (%)');
        xlim([VBP.concentric.bin(1)-VBP.inBal.dI, VBP.concentric.bin(end)+VBP.inBal.dI])
        
        count = count + 1;
    end

elseif get(G.t12, 'Value') == 2
    figure('Name', 'Radial sector');
    % b - Angles
    count = 0;
    for i = 1:length(VBP.inBal.eT)
        subplot(length(VBP.inBal.eT),2,i+count)
        bar(VBP.radial.bin, VBP.radial.Pabs(:,i), 'FaceColor', [.6 .6 .6])
        if i == 1
            title({'P(Z, E_T)', ['E_T = ', num2str(VBP.inBal.eT(i)), ' J']});
        else
            title(['E_T = ', num2str(VBP.inBal.eT(i)), ' J']);
        end
        xlabel('Radial sector (degrees)');
        ylabel('Probability (%)');
        xlim([VBP.radial.bin(1)-VBP.inBal.rI, VBP.radial.bin(end)+VBP.inBal.rI])
        
        subplot(length(VBP.inBal.eT),2,i+count+1)
        bar(VBP.radial.bin, VBP.radial.Prel(:,i), 'FaceColor', [.6 .6 .6])
        if i == 1
            title({'P(E_T | Z)', ['E_T = ', num2str(VBP.inBal.eT(i)), ' J']});
        else
            title(['E_T = ', num2str(VBP.inBal.eT(i)), ' J']);
        end
        xlabel('Radial sector (degrees)');
        ylabel('Probability (%)');
        xlim([VBP.radial.bin(1)-VBP.inBal.rI, VBP.radial.bin(end)+VBP.inBal.rI])
        
        count = count + 1;
    end
end

function plot_maps(type)
% type 1 = prob maps
% type 2 = energy_maps
% type 3 = number of VBPs
global G VBP

% Plot probability map
if type == 1
    % Retrieve GUI
    val_map = get(G.t2, 'Value');
    str_map = get(G.t2, 'String');
    str_map = str_map{val_map};
    
    val_en  = get(G.t21, 'Value');
    str_en  = get(G.t21, 'String');
    str_en  = str_en{val_en};
    
    % Set title
    ttl     = [str_map, ' - ', str_en, ' J'];
    
    % Get lat and lon coordinates
    if ~isempty(regexpi(str_map, 'pixel', 'once'))
        lon     = VBP.pixel.lon;
        lat     = VBP.pixel.lat;
    else
        lon     = VBP.concentric.lon;
        lat     = VBP.concentric.lat;
    end
  
    % Get data to plot
    if val_map  == 1;% pixel, absolute
        data    = VBP.pixel.Pabs(:,:,val_en);
    elseif val_map == 2
        data    = VBP.pixel.Prel(:,:,val_en);
    elseif val_map == 3
        data    = VBP.concentric.PabsM(:,:,val_en);
    elseif val_map == 4
        data    = VBP.concentric.PrelM(:,:,val_en);
    elseif val_map == 5
        data    = VBP.radial.PabsM(:,:,val_en);
    elseif val_map == 6
        data    = VBP.radial.PrelM(:,:,val_en);
    end
       
    % Check if log
    if get(G.log_check, 'Value') == 1
        cmaplabel = 'Log10 Probability (%)';
        data      = log10(data);
    else
        cmaplabel = 'Probability (%)';
    end
    
% Plot energy maps    
elseif type == 2 
    % Retrieve GUI
    val_map = get(G.t3, 'Value');
    str_map = get(G.t3, 'String');
    str_map = str_map{val_map};
    
    val_prb  = get(G.t31, 'Value');
    str_prb  = get(G.t31, 'String');
    str_prb  = str_prb{val_prb};
    
    % Set title
    ttl      = ['Energy for a probability of ', str_prb, ' %'];
      
    % Get lat and lon coordinates
    if ~isempty(regexpi(str_map, 'pixel', 'once'))
        lon     = VBP.pixel.lon;
        lat     = VBP.pixel.lat;
    else
        lon     = VBP.concentric.lon;
        lat     = VBP.concentric.lat;
    end
  
    % Get data to plot
    if val_map  == 1;% pixel, absolute
        data    = VBP.pixel.E(:,:,val_prb);
    elseif val_map == 2
        data    = VBP.concentric.EM(:,:,val_prb);
    elseif val_map == 3
        data    = VBP.radial.EM(:,:,val_prb);
    end
    
    % Check if log
    if get(G.log_check, 'Value') == 1
        cmaplabel = 'Log10 Energy (kJ)';
        data      = log10(data);
    else
        cmaplabel = 'Energy (kJ)';
    end
    
elseif type == 3
    ttl     = 'Number of VBPs';
    lon     = VBP.pixel.lon;
    lat     = VBP.pixel.lat;
    if get(G.log_check, 'Value') == 1
        cmaplabel = 'Log10 Number of VBPs';
        data      = log10(VBP.pixel.Nt);
    else
        cmaplabel = 'Number of VBPs';
        data      = VBP.pixel.Nt;
    end
end


figure;
pcolor(lon,lat,data); shading flat; 
title(ttl); 
xlabel('Longitude');
ylabel('Latitude');
alpha .35 
c = colorbar;
ylabel(c, cmaplabel);

% hold on
% 
% if exist('str_map', 'var') && ~isempty(regexpi(str_map, 'concentric', 'once'))
%     contour(lon, lat, VBP.concentric.binM, 'k');
% elseif ~isempty(regexpi(str_map, 'radial', 'once'))
%     contour(lon, lat, VBP.radial.binM, 'k');
% end

plot_google_map('Maptype', 'terrain');

hold on;
plot(VBP.inBal.lon,VBP.inBal.lat,'^r', 'MarkerSize', 10, 'MarkerFaceColor', 'r', 'MarkerEdgeColor', 'k');
axis equal;